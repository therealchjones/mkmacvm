#!/bin/sh

# Run mkmacvm to create a new virtual machine
#
# System effects of this script:
#
# mkmacvm itself creates and configures a new Parallels virtual machine on the
# system where it's run, but attempts to make no other persistent changes on
# that system and to clean up after itself even if it fails. This test script
# attempts to make no other changes when run on a local system.
#
# If this script is run in an environment where the environment variables "CI"
# and "GITHUB_ACTIONS" are set to "true", the script will try to determine if
# Parallels Desktop Pro or Parallels Desktop for Business are available. If not,
# the script will attempt to install and activate Parallels Desktop for
# Business. The script uses the value of the secret "PARALLELS_KEY" from the
# GitHub Actions environment for activation. If used, the script attempts to
# deactivate Parallels Desktop when exiting; if this fails, the installation can
# be deactivated from the Parallels web site.

set -e
set -u

main() {
	export PATH="$PATH:/usr/local/bin"
	programname="$(basename "$0")"
	programdirectory="$(dirname "$0")"
	CI="${CI:-}"                         # set to "true" by GitHub Actions
	GITHUB_ACTIONS="${GITHUB_ACTIONS:-}" # set to "true" by GitHub Actions
	if [ "0" != "$(id -u)" ]; then
		if [ "true" = "$CI" ] && [ "true" = "$GITHUB_ACTIONS" ]; then
			echo "Executing with root privileges on GitHub runner"
		else
			echo "'$programname' requires root privileges. Please authenticate."
		fi
		exec sudo -E "$0" "$@"
	elif [ -z "$SUDO_USER" ] || [ "0" = "$SUDO_UID" ]; then
		echo "Error: 'programname' should be run as a regular user." >&2
	fi
	username="$SUDO_USER"
	MKMACVM="$programdirectory/mkmacvm"
	if [ ! -e "$MKMACVM" ]; then
		echo "Error: Unable to locate mkmacvm. It must be in the same" >&2
		echo "       directory as $programname, $programdirectory" >&2
		exit 1
	fi
	if [ "true" = "$CI" ] && [ "true" = "$GITHUB_ACTIONS" ]; then
		# running on GitHub-hosted runner
		# can install parallels from brew and python's probably already
		# installed
		echo "Testing mkmacvm on GitHub runner"
		if ! brew --version >/dev/null; then
			echo "Error: Homebrew is not installed on this GitHub runner." >&2
			exit 1
		fi
		installParallels || exit 1
		VERBOSE=y "$MKMACVM" || exit 1
	else
		# running on local machine
		# change as little as possible
		# don't run if requirements aren't met (just defer to mkmacvm)
		echo "Testing mkmacvm on local system"
		VERBOSE=y "$MKMACVM" || exit 1
	fi
}
deactivateParallels() {
	echo "Deactivating Parallels Desktop"
	sudo -u "$username" "$PRLSRVCTL" deactivate-license
}
getexec() {
	if [ 1 != "$#" ]; then
		echo "getexec accepts exactly 1 parameter" >&2
		return 1
	fi
	if sudo -u "$username" type "$1" >/dev/null 2>&1; then
		echo "$1"
	elif [ -e "/usr/local/bin/$1" ]; then
		echo "/usr/local/bin/$1"
	else
		return 1
	fi
}
installParallels() {
	echo "Installing Parallels Desktop with Homebrew"
	if [ -z "${PARALLELS_KEY:=}" ]; then
		echo "Error: 'PARALLELS_KEY' is not set; cannot activate Parallels Desktop" >&2
		return 1
	fi
	sudo -u "$username" brew update || return 1
	sudo -u "$username" brew install parallels --no-quarantine || return 1
	csreq="fade0c00000000ac0000000100000006000000060000000600000006000000020000001d636f6d2e706172616c6c656c732e6465736b746f702e636f6e736f6c650000000000000f0000000e000000010000000a2a864886f763640602060000000000000000000e000000000000000a2a864886f7636406010d0000000000000000000b000000000000000a7375626a6563742e4f550000000000010000000a344336333634414358540000"
	tccfile="/Users/$username/Library/Application Support/com.apple.TCC/TCC.db"
	for perm in kTCCServiceCamera \
		kTCCServiceMicrophone \
		kTCCServiceSystemPolicyDesktopFolder \
		kTCCServiceSystemPolicyDocumentsFolder \
		kTCCServiceSystemPolicyDownloadsFolder \
		kTCCServiceAccessibility; do
		sqlite3 "$tccfile" \
			"insert or replace into access (
				service,
				client,
				client_type,
				auth_value,
				auth_reason,
				auth_version,
				csreq,
				flags
			) values (
				'$perm',
				'com.parallels.desktop.console',
				0,
				2,
				3,
				1,
				X'$csreq',
				0
			)"
	done
	echo "Activating Parallels Desktop"
	if [ -z "${PRLSRVCTL:=$(getexec prlsrvctl)}" ]; then
		echo "Error: Unable to find 'prlsrvctl'. Cannot activate Parallels Desktop." >&2
		return 1
	fi
	trap 'deactivateParallels' EXIT
	if ! sudo -u "$username" "$PRLSRVCTL" install-license -k "$PARALLELS_KEY"; then
		error="Error: Unable to activate Parallels Desktop"
		error="${error}\n       If necessary, revoke current activation keys at"
		error="${error}\n       https://my.parallels.com"
		printf "%s\n" "$error" >&2
		return 1
	fi
}
main "$@"
