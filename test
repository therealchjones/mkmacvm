#!/bin/sh

# Run mkmacvm to create a new virtual machine
#
# System effects of this script:
#
# mkmacvm itself creates and configures a new Parallels virtual machine on the
# system where it's run, but attempts to make no other persistent changes on
# that system and to clean up after itself even if it fails. This test script
# attempts to make no other changes when run on a local system.
#
# If this script is run in an environment where the environment variables "CI"
# and "GITHUB_ACTIONS" are set to "true", the script will try to determine if
# Parallels Desktop Pro or Parallels Desktop for Business are available. If not,
# the script will attempt to install and activate Parallels Desktop for
# Business. The script uses the value of the secret "PARALLELS_KEY" from the
# GitHub Actions environment for activation. If used, the script attempts to
# deactivate Parallels Desktop when exiting; if this fails, the installation can
# be deactivated from the Parallels web site.

set -e
set -u

PATH="$PATH:/usr/local/bin"
DEBUG="${DEBUG:-}"
VERBOSE="${VERBOSE:-y}"
CI="${CI:-}"                         # set to "true" by GitHub Actions
GITHUB_ACTIONS="${GITHUB_ACTIONS:-}" # set to "true" by GitHub Actions
DEBUGOUT="/dev/null"
VERBOSEOUT="/dev/null"
if [ -n "$DEBUG" ]; then
	set +x
	VERBOSE=y
	DEBUGOUT="/dev/stdout"
fi
if [ -n "$VERBOSE" ]; then
	VERBOSEOUT="/dev/stdout"
fi
export PATH DEBUG VERBOSE
PROGRAMNAME="$(basename "$0")" || exit 1
PROGRAMDIRECTORY="$(dirname "$0")" || exit 1
MKMACVM="$PROGRAMDIRECTORY/mkmacvm"
if [ ! -e "$MKMACVM" ]; then
	echo "Error: Unable to locate mkmacvm. It must be in the same" >&2
	echo "       directory as $PROGRAMNAME, $PROGRAMDIRECTORY" >&2
	exit 1
fi

main() {
	if [ true = "$GITHUB_ACTIONS" ] || [ true = "$CI" ]; then
		if [ true != "$GITHUB_ACTIONS" ] || [ true != "$CI" ]; then
			echo "Error: GITHUB_ACTIONS = '$GITHUB_ACTIONS' but CI = '$CI'" >&2
			echo "       They should both be true or both be not true." >&2
			echo "       Exiting." >&2
		fi
	fi
	# from now on we may check CI alone without worrying about both
	if [ "0" != "$(id -u)" ]; then
		if [ -n "${TEST_MKMACVM_REEXECUTE:=}" ]; then
			echo 'Error: unable to obtain necessary privileges' >&2
			exit 1
		fi
		echo "Obtaining necessary privileges via 'sudo'" >"$VERBOSEOUT"
		export TEST_MKMACVM_REEXECUTE=y
		exec sudo -E "$0" "$@"
	elif [ -z "${SUDO_USER:=}" ] || [ "0" = "${SUDO_UID:=}" ]; then
		echo "Error: 'SUDO_USER' is empty or 'SUDO_UID' is 0. '$PROGRAMNAME'" >&2
		echo "       should be run as a regular user, and will invoke sudo." >&2
		echo "       as needed." >&2
		exit 1
	fi

	username="$SUDO_USER"

	if [ "true" = "$CI" ]; then
		# can install parallels from brew and python's probably already
		# installed
		echo "Testing mkmacvm on GitHub runner" >"$VERBOSEOUT"
		if ! brew --version >"$DEBUGOUT"; then
			echo "Error: Homebrew is not installed on this GitHub runner." >&2
			exit 1
		fi
		installParallels || exit 1
	else
		# running on local machine
		# change as little as possible
		# don't run if requirements aren't met (just defer to mkmacvm)
		echo "Testing mkmacvm on local system" >"$VERBOSEOUT"
	fi
	if ! "$MKMACVM"; then
		echo 'mkmacvm FAIL' >"$VERBOSEOUT"
		exit 1
	else
		echo 'mkmacvm SUCCESS' >"$VERBOSEOUT"
		exit 0
	fi
}
deactivateParallels() {
	echo "Deactivating Parallels Desktop" >"$VERBOSEOUT"
	{ sudo -u "$username" "$PRLSRVCTL" deactivate-license; } >"$DEBUGOUT" 2>&1
}
getexec() {
	if [ 1 != "$#" ]; then
		echo "getexec accepts exactly 1 parameter" >&2
		return 1
	fi
	if output="$({ sudo -u "$username" type "$1"; })"; then
		echo "$1"
	elif [ -e "/usr/local/bin/$1" ]; then
		echo "/usr/local/bin/$1"
	else
		# If foo is not found, type foo outputs 'foo not found' to stdout, not
		# stderr. This changes that.
		echo "$output" >&2
		return 1
	fi
}
installParallels() {
	echo "Installing Parallels Desktop with Homebrew" >"$VERBOSEOUT"
	if [ -z "${PARALLELS_KEY:=}" ]; then
		echo "Error: 'PARALLELS_KEY' is not set; cannot activate Parallels Desktop" >&2
		return 1
	fi
	if ! output="$({ sudo -u "$username" brew update; } 2>&1)"; then
		echo "$output" >&2
		# but don't necessarily fail here
	fi
	if ! output="$({ sudo -u "$username" brew install parallels --no-quarantine; } 2>&1)"; then
		echo "$output" >&2
		echo "Error: Unable to install Parallels Desktop" >&2
		return 1
	fi
	# See, among others,
	# https://www.rainforestqa.com/blog/macos-tcc-db-deep-dive and
	# https://stackoverflow.com/questions/52706542/how-to-get-csreq-of-macos-application-on-command-line/57259004#57259004
	echo "Adding permissions for Parallels Desktop" >"$VERBOSEOUT"
	if ! csreq="$(
		codesign -d -r - /Applications/Parallels\ Desktop.app \
			| sed -E -e 's/^designated => //' \
			| csreq -r - -b /dev/stdout \
			| xxd -p \
			| tr -d '\n'
	)" 2>"$DEBUGOUT"; then
		echo "$csreq" >&2
		echo "Error: Unable to add required permissions to Parallels" >&2
		return 1
	fi
	tccfile="/Users/$username/Library/Application Support/com.apple.TCC/TCC.db"
	for perm in kTCCServiceCamera \
		kTCCServiceMicrophone \
		kTCCServiceSystemPolicyDesktopFolder \
		kTCCServiceSystemPolicyDocumentsFolder \
		kTCCServiceSystemPolicyDownloadsFolder \
		kTCCServiceAccessibility; do
		sqlite3 "$tccfile" \
			"insert or replace into access (
				service,
				client,
				client_type,
				auth_value,
				auth_reason,
				auth_version,
				csreq,
				flags
			) values (
				'$perm',
				'com.parallels.desktop.console',
				0,
				2,
				3,
				1,
				X'$csreq',
				0
			)"
	done
	echo "Activating Parallels Desktop"
	if [ -z "${PRLSRVCTL:=$(getexec prlsrvctl)}" ]; then
		echo "Error: Unable to find 'prlsrvctl'. Cannot activate Parallels Desktop." >&2
		return 1
	fi
	trap 'deactivateParallels' EXIT
	if ! { sudo -u "$username" "$PRLSRVCTL" install-license -k "$PARALLELS_KEY"; } >"$DEBUGOUT"; then
		error="Error: Unable to activate Parallels Desktop"
		error="${error}\n       If necessary, revoke current activation keys at"
		error="${error}\n       https://my.parallels.com"
		printf "%s\n" "$error" >&2
		return 1
	fi
}
main "$@"
