#!/bin/sh

# Run mkmacvm to create a new virtual machine
#
# System effects of this script:
#
# mkmacvm itself creates and configures a new Parallels virtual machine on the
# system where it's run, but attempts to make no other persistent changes on
# that system and to clean up after itself even if it fails. This test script
# attempts to make no other changes when run on a local system.
#
# If this script is run in an environment where the environment variables "CI"
# and "GITHUB_ACTIONS" are set to "true", the script will try to determine if
# Parallels Desktop Pro or Parallels Desktop for Business are available. If not,
# the script will attempt to install and activate Parallels Desktop for
# Business. The script uses the value of the secret "PARALLELS_KEY" from the
# GitHub Actions environment for activation. If used, the script attempts to
# deactivate Parallels Desktop when exiting; if this fails, the installation can
# be deactivated from the Parallels web site.

set -e
set -u

PATH="$PATH:/usr/local/bin"
DEBUG="${DEBUG:-}"
VERBOSE="${VERBOSE:-y}"
CI="${CI:-}"                         # set to "true" by GitHub Actions
GITHUB_ACTIONS="${GITHUB_ACTIONS:-}" # set to "true" by GitHub Actions
VERBOSEOUT="/dev/null"
if [ -n "$DEBUG" ]; then
	set -x
	VERBOSE=y
fi
if [ -n "$VERBOSE" ]; then
	VERBOSEOUT="/dev/stdout"
fi
export PATH DEBUG VERBOSE
PROGRAMNAME="$(basename "$0")" || exit 1
PROGRAMDIRECTORY="$(dirname "$0")" || exit 1
MKMACVM="$PROGRAMDIRECTORY/mkmacvm"
if [ ! -e "$MKMACVM" ]; then
	echo "Error: Unable to locate mkmacvm. It must be in the same" >&2
	echo "       directory as $PROGRAMNAME, $PROGRAMDIRECTORY" >&2
	exit 1
fi

main() {
	if [ true = "$GITHUB_ACTIONS" ] || [ true = "$CI" ]; then
		if [ true != "$GITHUB_ACTIONS" ] || [ true != "$CI" ]; then
			echo "Error: GITHUB_ACTIONS = '$GITHUB_ACTIONS' but CI = '$CI'" >&2
			echo "       They should both be true or both be not true." >&2
			echo "       Exiting." >&2
		fi
	fi
	if [ -z "${SUDO_USER:=}" ] || [ "0" = "${SUDO_UID:=}" ]; then
		echo "Error: 'SUDO_USER' is empty or 'SUDO_UID' is 0. '$PROGRAMNAME'" >&2
		echo "       should be run as with sudo." >&2
		exit 1
	fi

	username="$SUDO_USER"

	if [ "true" = "$CI" ]; then
		# can install parallels from brew and python's probably already
		# installed
		echo "Testing mkmacvm on GitHub runner" >"$VERBOSEOUT"
	else
		# running on local machine
		# change as little as possible
		# don't run if requirements aren't met (just defer to mkmacvm)
		echo "Testing mkmacvm on local system" >"$VERBOSEOUT"
	fi
	if ! "$MKMACVM"; then
		echo 'mkmacvm FAIL' >"$VERBOSEOUT"
		exit 1
	else
		echo 'mkmacvm SUCCESS' >"$VERBOSEOUT"
		exit 0
	fi
}
getexec() {
	if [ 1 != "$#" ]; then
		echo "getexec accepts exactly 1 parameter" >&2
		return 1
	fi
	if output="$({ sudo -u "$username" type "$1"; })"; then
		echo "$1"
	elif [ -e "/usr/local/bin/$1" ]; then
		echo "/usr/local/bin/$1"
	else
		# If foo is not found, type foo outputs 'foo not found' to stdout, not
		# stderr. This changes that.
		echo "$output" >&2
		return 1
	fi
}
main "$@"
