#!/bin/sh

# Run mkmacvm to create a new virtual machine
#
# System effects of this script:
#
# mkmacvm itself creates and configures a new Parallels virtual machine on the
# system where it's run, but attempts to make no other persistent changes on
# that system and to clean up after itself even if it fails. This test script
# may leave that virtual machine in the "running" state, but attempts to make no
# other changes to the system where it's run in most cases.
#
# If this script is run in an environment where the environment variables "CI"
# and "GITHUB_ACTIONS" are set to "true", the script will try to determine if
# Parallels Desktop Pro
# or Parallels Desktop for Business are available. If not, the script will
# attempt to install and activate
# Parallels Desktop for Business. The script uses the value of the
# secret "PARALLELS_KEY" from the GitHub Actions environment for activation. If used, the
# script attempts to deactivate Parallels Desktop when exiting; if this fails,
# the installation can be deactivated from the Parallels web site.

set -e
set -u

main() {
	export PATH="$PATH:/usr/local/bin"
	programname="$(basename "$0")"
	programdirectory="$(dirname "$0")"
	CI="${CI:-}"                         # set to "true" by GitHub Actions
	GITHUB_ACTIONS="${GITHUB_ACTIONS:-}" # set to "true" by GitHub Actions
	if [ "0" != "$(id -u)" ]; then
		if [ "true" = "$CI" ] && [ "true" = "$GITHUB_ACTIONS" ]; then
			echo "Executing with root privileges on GitHub runner"
		else
			echo "'$programname' requires root privileges. Please authenticate."
		fi
		exec sudo -E "$0" "$@"
	elif [ -z "$SUDO_USER" ] || [ "0" = "$SUDO_UID" ]; then
		echo "Error: 'programname' should be run as a regular user." >&2
	fi
	username="$SUDO_USER"
	MKMACVM="$programdirectory/mkmacvm"
	if [ ! -e "$MKMACVM" ]; then
		echo "Error: Unable to locate mkmacvm. It must be in the same" >&2
		echo "       directory as $programname, $programdirectory" >&2
		exit 1
	fi
	if [ "true" = "$CI" ] && [ "true" = "$GITHUB_ACTIONS" ]; then
		# running on GitHub-hosted runner
		# can install parallels from brew and python's probably already
		# installed
		echo "Testing mkmacvm on GitHub runner"
		if ! brew --version >/dev/null; then
			echo "Error: Homebrew is not installed on this GitHub runner." >&2
			exit 1
		fi
		installParallels || exit 1
		VERBOSE=y "$MKMACVM" || exit 1
	else
		# running on local machine
		# change as little as possible
		# don't run if requirements aren't met (just defer to mkmacvm)
		echo "Testing mkmacvm on local system"
		VERBOSE=y "$MKMACVM" || exit 1
	fi
}
deactivateParallels() {
	echo "Deactivating Parallels Desktop"
	sudo -u "$username" "$PRLSRVCTL" deactivate-license
}
getexec() {
	if [ 1 != "$#" ]; then
		echo "getexec accepts exactly 1 parameter" >&2
		return 1
	fi
	if sudo -u "$username" type "$1" >/dev/null 2>&1; then
		echo "$1"
	elif [ -e "/usr/local/bin/$1" ]; then
		echo "/usr/local/bin/$1"
	else
		return 1
	fi
}
installParallels() {
	echo "Installing Parallels Desktop with Homebrew"
	if [ -z "${PARALLELS_KEY:=}" ]; then
		echo "Error: 'PARALLELS_KEY' is not set; cannot activate Parallels Desktop" >&2
		return 1
	fi
	sudo -u "$username" brew update || return 1
	sudo -u "$username" brew install parallels || return 1
	launchctl stop com.parallels.desktop.launchdaemon
	launchctl start com.parallels.desktop.launchdaemon
	echo "Activating Parallels Desktop"
	if [ -z "${PRLSRVCTL:=$(getexec prlsrvctl)}" ]; then
		echo "Error: Unable to find 'prlsrvctl'. Cannot activate Parallels Desktop." >&2
		return 1
	fi
	trap 'deactivateParallels' EXIT
	if ! sudo -u "$username" "$PRLSRVCTL" install-license -k "$PARALLELS_KEY"; then
		echo "Error: Unable to activate Parallels Desktop" >&2
		echo "       If necessary, revoke current activation keys at" >&2
		echo "       https://my.parallels.com" >&2
		echo "Firewall log:"
		cat /private/var/log/appfirewall.log
		return 1
	fi
}
main "$@"
