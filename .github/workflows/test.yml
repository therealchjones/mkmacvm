name: test
on:
  workflow_dispatch:
    inputs:
      debug:
        description: "Debug mode"
        required: true
        type: boolean
  pull_request:
concurrency: uses-parallels-key
jobs:
  run:
    runs-on: macos-12
    steps:
      - name: enable SSH
        if: inputs.debug
        run: |
          brew install ngrok/ngrok/ngrok --no-quarantine
          ngrok tcp --log "$HOME/ngrok.log" --log-format logfmt 22 &
          mkdir -p "$HOME/.ssh"
          mkdir -p "$HOME/github-runner-ssh"
          ssh-keygen -q -N "" -t rsa -f "$HOME/github_runner_rsa"
          cat "$HOME/github_runner_rsa.pub" >> "$HOME/.ssh/authorized_keys"
          chmod 0600 "$HOME/.ssh/"*
          chmod 0700 "$HOME/.ssh"
          ngrok_connection="$( grep 'msg="started tunnel"' "$HOME/ngrok.log" | head -n 1)"
          ngrok_url="${ngrok_connection##*url=tcp://}"
          ngrok_port="${ngrok_url##*:}"
          ngrok_address="${ngrok_url%:"$ngrok_port"}"
          cat >"$HOME/github-runner-connect" <<EOF
          #!/bin/sh
          id_file="$(mktemp)"
          cat >"$idfile"<<end_of_key
          EOF
          cat "$HOME/github_runner_rsa" >> "$HOME/github-runner-connect"
          cat >>"$HOME/github-runner-connect" <EOF
          end_of_key
          chmod 0600 "$idfile"
          EOF
          echo 'ssh -i "$idfile" -p '"$ngrok_port runner@$ngrok_address" \
          >> "$HOME/github-runner-connect"
          chmod 0755 "$HOME/github-runner-connect"
          echo 'SSH configured; get connection script from Artifacts'
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_TOKEN }}
      - name: save SSH connection script
        if: success() && inputs.debug
        uses: actions/upload-artifact@v3
        with:
          name: github-runner-connect
          path: ~/github-runner-connect
      - name: checkout repository
        uses: actions/checkout@v3.0.2
      - name: install Parallels Desktop
        env:
          PARALLELS_KEY: ${{ secrets.PARALLELS_KEY }}
        run: |
          echo "Installing Parallels Desktop with Homebrew"
          if [ -z "${PARALLELS_KEY:=}" ]; then
            echo "Error: 'PARALLELS_KEY' is not set; cannot activate Parallels Desktop" >&2
            exit 1
          fi
          if ! output="$( brew update 2>&1)"; then
            echo "$output" >&2
            # but don't necessarily fail here
          fi
          if ! output="$(brew install parallels --no-quarantine 2>&1)"; then
            echo "$output" >&2
            echo "Error: Unable to install Parallels Desktop" >&2
            exit 1
          fi
          # See, among others,
          # https://www.rainforestqa.com/blog/macos-tcc-db-deep-dive and
          # https://stackoverflow.com/questions/52706542/how-to-get-csreq-of-macos-application-on-command-line/57259004#57259004
          echo "Adding permissions for Parallels Desktop"
          if ! csout="$(codesign -d -r - /Applications/Parallels\ Desktop.app 2>&1)" \
            || ! csreq="$(
              echo "$csout" \
                | sed -E -e '/^designated =>/!d' -e 's/^designated => //' \
                | csreq -r - -b /dev/stdout \
                | xxd -p \
                | tr -d '\n'
            )"; then
            echo "$csout" >&2
            echo "$csreq" >&2
            echo "Error: Unable to add required permissions to Parallels" >&2
            exit 1
          fi
          tccfile="$HOME/Library/Application Support/com.apple.TCC/TCC.db"
          for perm in kTCCServiceCamera \
            kTCCServiceMicrophone \
            kTCCServiceSystemPolicyDesktopFolder \
            kTCCServiceSystemPolicyDocumentsFolder \
            kTCCServiceSystemPolicyDownloadsFolder \
            kTCCServiceAccessibility; do
            sqlite3 "$tccfile" \
              "insert or replace into access (
                service,
                client,
                client_type,
                auth_value,
                auth_reason,
                auth_version,
                csreq,
                flags
              ) values (
                '$perm',
                'com.parallels.desktop.console',
                0,
                2,
                3,
                1,
                X'$csreq',
                0
              )"
          done
          echo "Activating Parallels Desktop"
          if [ ! -e /usr/local/bin/prlsrvctl ]; then
            echo "Error: Unable to find 'prlsrvctl'. Cannot activate Parallels Desktop." >&2
            exit 1
          fi
          if ! /usr/local/bin/prlsrvctl install-license -k "$PARALLELS_KEY"; then
            error="Error: Unable to activate Parallels Desktop"
            error="${error}\n       If necessary, revoke current activation keys at"
            error="${error}\n       https://my.parallels.com"
            printf "%s\n" "$error" >&2
            exit 1
          fi
      - name: set debug mode
        if: ${{ inputs.debug }}
        run: echo "DEBUG=y" >> "$GITHUB_ENV"
      - name: test mkmacvm
        run: sudo -E "$GITHUB_WORKSPACE/mkmacvm"
        env:
          VERBOSE: y
          DEBUG: ${{ env.DEBUG }}
      - name: take desktop screenshot
        uses: OrbitalOwen/desktop-screenshot-action@0.1
        if: failure() || inputs.debug
        with:
          file-name: "desktop.jpg"
      - name: deactivate Parallels Desktop
        if: always()
        run: |
          if [ -e /usr/local/bin/prlsrvctl ]; then
            if ! output="$(/usr/local/bin/prlsrvctl deactivate-license 2>&1)"; then
              if ! echo "$output" | grep 'activation key is invalid' >/dev/null; then
                error="$output"
                error="$error\nYou may be able to deactivate Parallels Desktop at"
                error="$error\nhttps://my.parallels.com"
                echo "$error" >&2
                exit 1
              else
                echo "Unable to deactivate license; Parallels Desktop is already deactivated"
              fi
            else
              echo "$output"
            fi
          else
            error="Unable to deactivate Parallels Desktop: prlsrvctl not found"
            error="$error\nYou may be able to deactivate Parallels Desktop at"
            error="$error\nhttps://my.parallels.com"
            echo "$error" >&2
            exit 1
          fi
