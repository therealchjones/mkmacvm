#!/bin/sh

if [ "postinstall" = "${0##*/}" ]; then
	VERBOSE=y
fi
if [ -n "$DEBUG" ]; then
	set -x
	set -e
	DEBUGOUT=/dev/stdout
	VERBOSE=y
	whoami
	env
	set
else
	DEBUGOUT=/dev/null
fi
if [ -n "$VERBOSE" ]; then
	VERBOSEOUT=/dev/stdout
else
	VERBOSEOUT=/dev/null
fi

if [ "${0}" = "${0%/*}" ]; then
	SCRIPTDIR="."
else
	SCRIPTDIR="${0%/*}"
fi

echo Getting configuration... >"$VERBOSEOUT"
if [ ! -r "${SCRIPTDIR}/config.sh" ]; then
	echo "Configuration file '${SCRIPTDIR}/config.sh' not found." >&2
	exit 1
fi

# This configuration file is only present during the creation and
# installation process; disable shellcheck here to prevent complaints
# about it.
# shellcheck disable=SC1090,SC1091
. "${SCRIPTDIR}/config.sh"
if [ -z "$USERNAME" ]; then
	echo "Configuration file does not include username. Exiting." >&2
	exit 1
fi
if [ -z "$SHADOW" ]; then
	echo "Configuration file does not include user settings. Exiting." >&2
	exit 1
fi

echo Creating user "'$USERNAME'"... >"$VERBOSEOUT"
dscl . -create /Users/"$USERNAME"
if [ -n "$USERREALNAME" ]; then
	dscl . -create /Users/"$USERNAME" RealName "$USERREALNAME"
fi
dscl . -create /Users/"$USERNAME" UniqueID 501
dscl . -create /Users/"$USERNAME" PrimaryGroupID 20
dscl . -create /Users/"$USERNAME" UserShell /bin/zsh
dseditgroup -o edit -a "$USERNAME" -t user admin
dscl . -create /Users/"$USERNAME" dsAttrTypeStandard:AuthenticationAuthority \
	';ShadowHash;HASHLIST:<SALTED-SHA512-PBKDF2>'
cat >"$SCRIPTDIR/shadowhash" <<-EOF
	0x0A 0x5C 0x3A 0x2C dsRecTypeStandard:Users 2 dsAttrTypeStandard:RecordName base64:dsAttrTypeNative:ShadowHashData
	${USERNAME}:$SHADOW
EOF
dsimport "$SCRIPTDIR/shadowhash" /Local/Default M
echo Creating home directories... >"$VERBOSEOUT"
USER_HOME=/Users/"$USERNAME"
dscl . -create /Users/"$USERNAME" NFSHomeDirectory "$USER_HOME"
# Workaround for a dumb createhomedir error/warning when it's can't read
# parent directories, fixes issue #6
(cd / && createhomedir -c -u "$USERNAME") >"$DEBUGOUT"
if [ ! -d "$USER_HOME" ]; then
	echo Home directory "'$USER_HOME'" not created. Exiting. >&2
	exit 1
fi

echo Looking for SSH keys... >"$VERBOSEOUT"
for file in "$SCRIPTDIR"/id_*.pub; do
	if [ -r "$file" ]; then
		echo Installing SSH key "$(basename "$file")" >"$VERBOSEOUT"
		USER_SSH="$USER_HOME"/.ssh
		mkdir -p "$USER_SSH"
		cat "$file" >>"$USER_SSH"/authorized_keys
		chmod 0600 "$USER_SSH"/authorized_keys
		chmod 0700 "$USER_SSH"
		chown -R "$USERNAME" "$USER_SSH"
	fi
done

echo Disabling setup assistant... >"$VERBOSEOUT"
/usr/bin/touch /private/var/db/.AppleSetupDone
mkdir -p "${USER_HOME}"/Library/Preferences
SETUPPREFS="${USER_HOME}"/Library/Preferences/com.apple.SetupAssistant
for setting in DidSeeApplePaySetup DidSeeAvatarSetup DidSeeCloudSetup DidSeeiCloudLoginForStorageServices DidSeePrivacy DidSeeSiriSetup DidSeeSyncSetup DidSeeSyncSetup2 DidSeeTouchIDSetup DidSeeAppearanceSetup DidSeeTrueTone DidSeeActivationLock DidSeeScreenTime DidSeeAccessibility DidSeeAppStore; do
	defaults write "$SETUPPREFS" "$setting" -bool true
done
defaults write "$SETUPPREFS" LastSeenBuddyBuildVersion -string "$(sw_vers -buildVersion)"
for setting in LastSeenCloudProductVersion LastSeeniCloudStorageServicesProductVersion LastSeenSyncProductVersion LastSeenDiagnosticsProductVersion LastSeenSiriProductVersion; do
	defaults write "$SETUPPREFS" "$setting" -string "$(sw_vers -productVersion)"
done
chown "$USERNAME" "${USER_HOME}/Library/Preferences"
chown "$USERNAME" "$SETUPPREFS".plist

echo Updating macOS... >"$VERBOSEOUT"
# need to wait for the network to start first
ipaddress=""
until [ -n "$ipaddress" ]; do
	sleep 5
	ipaddress="$(
		ifconfig en0 inet \
			| grep inet \
			| sed 's/^[[:space:]]*inet[[:space:]]+\([\.0-9]+\)[[:space:]]+.*$/\1/'
	)"
done
tries=120
until softwareupdate -i -r >"$DEBUGOUT" 2>&1; do
	echo "Checking again for updates" >"$VERBOSEOUT"
	tries="$((tries - 1))"
	if [ 0 -ge "$tries" ]; then
		echo "Error: timed out checking for updates" >&2
		break
	fi
	sleep 5
done

echo Starting the SSH server... >"$VERBOSEOUT"
launchctl load -w /System/Library/LaunchDaemons/ssh.plist
login_message="mkmacvm login success"
loginSuccess() {
	if log show --no-pager --last 1h --style compact --predicate "composedMessage CONTAINS '$login_message'" \
		| grep "$login_message$" >"$DEBUGOUT" 2>&1; then
		return 0
	else
		return 1
	fi
}
tries=30
until loginSuccess; do
	tries="$((tries - 1))"
	if [ 0 -ge "$tries" ]; then
		echo "Error: timed out waiting for mkmacvm to log in to the new VM" >&2
		break
	fi
	sleep 5
done

echo Completed "$0". Shutting down. >"$VERBOSEOUT"
shutdown -h +2

#
# Please see also https://github.com/therealchjones/mkmacvm/blob/main/LICENSE
#
# Copyright 2019 Twocanoes Software, Inc
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this source code except in compliance with the License. You may obtain a
# copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
